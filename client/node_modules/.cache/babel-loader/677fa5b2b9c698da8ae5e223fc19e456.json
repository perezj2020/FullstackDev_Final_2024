{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jp\\\\OneDrive\\\\Documents\\\\GitHub\\\\final-project-perezj2020\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = props => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [sortType, setSortType] = useState('likes');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let query = supabase.from('Posts').select('*');\n\n      if (sortType === 'likes') {\n        query = query.order('likes', {\n          ascending: false\n        });\n      } else if (sortType === 'created_at') {\n        query = query.order('created_at', {\n          ascending: false\n        });\n      }\n\n      const {\n        data,\n        error\n      } = await query;\n\n      if (error) {\n        console.error('Error fetching posts:', error);\n        return;\n      }\n\n      setPosts(data);\n    };\n\n    fetchPosts();\n  }, [sortType]); // Re-fetch posts when sortType changes\n\n  const handleSearch = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Posts').select('*').ilike('title', `%${searchTerm}%`); // Case-insensitive search in the 'title' column\n\n    if (error) {\n      console.error('Error searching posts:', error);\n    } else {\n      // Update the state with the search result, or handle it as needed\n      console.log(data);\n      setSearchResults(data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sort-buttons-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sort-button\",\n      onClick: () => setSortType('likes'),\n      children: \"Sort by Likes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sort-button\",\n      onClick: () => setSortType('created_at'),\n      children: \"Sort by Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ReadPosts\",\n      children: posts && posts.length > 0 ? posts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n        created_at: post.created_at,\n        id: post.id,\n        title: post.title,\n        author: post.author,\n        description: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: 'No Food?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: searchResults.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Card\",\n        children: [post.title, /*#__PURE__*/_jsxDEV(Link, {\n          to: `/posts/${post.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"headerBtn\",\n            children: \"  Recipe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 5\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"xeGENQpRzfssBToBFOeQslQdFCw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","Link","ReadPosts","props","posts","setPosts","sortType","setSortType","searchTerm","setSearchTerm","searchResults","setSearchResults","fetchPosts","query","from","select","order","ascending","data","error","console","handleSearch","ilike","log","length","map","post","index","created_at","id","title","author","description","e","target","value"],"sources":["C:/Users/jp/OneDrive/Documents/GitHub/final-project-perezj2020/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Card from '../components/Card';\r\nimport { supabase } from '../client';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ReadPosts = (props) => {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [sortType, setSortType] = useState('likes'); \r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            let query = supabase.from('Posts').select('*');\r\n\r\n            if (sortType === 'likes') {\r\n                query = query.order('likes', { ascending: false });\r\n            } else if (sortType === 'created_at') {\r\n                query = query.order('created_at', { ascending: false });\r\n            }\r\n\r\n            const { data, error } = await query;\r\n\r\n            if (error) {\r\n                console.error('Error fetching posts:', error);\r\n                return;\r\n            }\r\n            setPosts(data);\r\n        };\r\n\r\n        fetchPosts();\r\n    }, [sortType]);  // Re-fetch posts when sortType changes\r\n    const handleSearch = async () => {\r\n        const { data, error } = await supabase\r\n          .from('Posts')\r\n          .select('*')\r\n          .ilike('title', `%${searchTerm}%`); // Case-insensitive search in the 'title' column\r\n      \r\n        if (error) {\r\n          console.error('Error searching posts:', error);\r\n        } else {\r\n          // Update the state with the search result, or handle it as needed\r\n          console.log(data);\r\n          setSearchResults(data);\r\n        }\r\n      };\r\n      \r\n\r\n    return (\r\n        \r\n        <div className=\"sort-buttons-container\">\r\n    <button className=\"sort-button\" onClick={() => setSortType('likes')}>Sort by Likes</button>\r\n    <button className=\"sort-button\" onClick={() => setSortType('created_at')}>Sort by Date</button>\r\n    <div className=\"ReadPosts\">\r\n    {\r\n            posts && posts.length > 0 ?\r\n            posts.map((post,index) => \r\n                <Card created_at={post.created_at} id={post.id} title={post.title} author={post.author} description={post.description}/>\r\n            ) : <h2>{'No Food?'}</h2>\r\n                }\r\n        </div> \r\n        <div>\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search...\"\r\n      value={searchTerm}\r\n      onChange={(e) => setSearchTerm(e.target.value)}\r\n    />\r\n    <button onClick={handleSearch}>Search</button>\r\n  </div>\r\n  <div>\r\n  {searchResults.map((post) => (\r\n    <div className=\"Card\" key={post.id}>{post.title}\r\n    <Link to={`/posts/${post.id}`}>\r\n        <button className=\"headerBtn\">  Recipe</button>\r\n      </Link>\r\n    \r\n    </div>\r\n    \r\n  ))}\r\n</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadPosts;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}